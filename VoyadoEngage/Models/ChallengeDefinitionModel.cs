// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using VoyadoEngage.Json;

namespace VoyadoEngage.Models;

public record ChallengeDefinitionModel(
    [property:
        JsonPropertyName("checkpointAssignOn"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ChallengeDefinitionModel.CheckpointAssignOn? CheckpointAssignOn_ = null,
    [property:
        JsonPropertyName("checkpointAssignOnAmount"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? CheckpointAssignOnAmount = null,
    [property:
        JsonPropertyName("createdBy"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? CreatedBy = null,
    [property:
        JsonPropertyName("createdOn"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? CreatedOn = null,
    [property:
        JsonPropertyName("description"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Description = null,
    [property:
        JsonPropertyName("expirationMonths"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? ExpirationMonths = null,
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    [property:
        JsonPropertyName("isContactConsentRequired"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? IsContactConsentRequired = null,
    [property:
        JsonPropertyName("isScheduled"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? IsScheduled = null,
    [property:
        JsonPropertyName("modifiedBy"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? ModifiedBy = null,
    [property:
        JsonPropertyName("modifiedOn"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? ModifiedOn = null,
    [property:
        JsonPropertyName("name"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Name = null,
    [property:
        JsonPropertyName("requiredNumberOfCheckpoints"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? RequiredNumberOfCheckpoints = null,
    [property:
        JsonPropertyName("scheduledFrom"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? ScheduledFrom = null,
    [property:
        JsonPropertyName("scheduledTo"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? ScheduledTo = null,
    [property:
        JsonPropertyName("status"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        ChallengeDefinitionModel.ChallengeDefinitionModelStatus? Status = null,
    [property:
        JsonPropertyName("links"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<IHypermediaLink>? Links = null
)
{
    public record CheckpointAssignOn : ValueEnum<string>
    {
        internal CheckpointAssignOn(string value)
            : base(value) { }

        public CheckpointAssignOn()
            : base("None") { }

        public static CheckpointAssignOn None = new("None");
        public static CheckpointAssignOn ReceiptTotal = new("ReceiptTotal");
        public static CheckpointAssignOn ReceiptLineQuantity = new("ReceiptLineQuantity");
        public static CheckpointAssignOn ReceiptLineTotal = new("ReceiptLineTotal");
    }

    public record ChallengeDefinitionModelStatus : ValueEnum<string>
    {
        internal ChallengeDefinitionModelStatus(string value)
            : base(value) { }

        public ChallengeDefinitionModelStatus()
            : base("All") { }

        public static ChallengeDefinitionModelStatus All = new("All");
        public static ChallengeDefinitionModelStatus Active = new("Active");
        public static ChallengeDefinitionModelStatus Draft = new("Draft");
        public static ChallengeDefinitionModelStatus Scheduled = new("Scheduled");
        public static ChallengeDefinitionModelStatus Ended = new("Ended");
    }
}
