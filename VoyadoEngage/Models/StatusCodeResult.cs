// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using VoyadoEngage.Json;

namespace VoyadoEngage.Models;

public record StatusCodeResult(
    [property:
        JsonPropertyName("statusCode"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        StatusCodeResult.StatusCode? StatusCode_ = null,
    [property:
        JsonPropertyName("request"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        object? Request_ = null
)
{
    public record StatusCode : ValueEnum<string>
    {
        internal StatusCode(string value)
            : base(value) { }

        public StatusCode()
            : base("Continue") { }

        public static StatusCode Continue_ = new("Continue");
        public static StatusCode SwitchingProtocols = new("SwitchingProtocols");
        public static StatusCode Ok = new("OK");
        public static StatusCode Created = new("Created");
        public static StatusCode Accepted = new("Accepted");
        public static StatusCode NonAuthoritativeInformation = new("NonAuthoritativeInformation");
        public static StatusCode NoContent = new("NoContent");
        public static StatusCode ResetContent = new("ResetContent");
        public static StatusCode PartialContent = new("PartialContent");
        public static StatusCode MultipleChoices = new("MultipleChoices");
        public static StatusCode Ambiguous = new("Ambiguous");
        public static StatusCode MovedPermanently = new("MovedPermanently");
        public static StatusCode Moved = new("Moved");
        public static StatusCode Found = new("Found");
        public static StatusCode Redirect = new("Redirect");
        public static StatusCode SeeOther = new("SeeOther");
        public static StatusCode RedirectMethod = new("RedirectMethod");
        public static StatusCode NotModified = new("NotModified");
        public static StatusCode UseProxy = new("UseProxy");
        public static StatusCode Unused = new("Unused");
        public static StatusCode TemporaryRedirect = new("TemporaryRedirect");
        public static StatusCode RedirectKeepVerb = new("RedirectKeepVerb");
        public static StatusCode BadRequest = new("BadRequest");
        public static StatusCode Unauthorized = new("Unauthorized");
        public static StatusCode PaymentRequired = new("PaymentRequired");
        public static StatusCode Forbidden = new("Forbidden");
        public static StatusCode NotFound = new("NotFound");
        public static StatusCode MethodNotAllowed = new("MethodNotAllowed");
        public static StatusCode NotAcceptable = new("NotAcceptable");
        public static StatusCode ProxyAuthenticationRequired = new("ProxyAuthenticationRequired");
        public static StatusCode RequestTimeout = new("RequestTimeout");
        public static StatusCode Conflict = new("Conflict");
        public static StatusCode Gone = new("Gone");
        public static StatusCode LengthRequired = new("LengthRequired");
        public static StatusCode PreconditionFailed = new("PreconditionFailed");
        public static StatusCode RequestEntityTooLarge = new("RequestEntityTooLarge");
        public static StatusCode RequestUriTooLong = new("RequestUriTooLong");
        public static StatusCode UnsupportedMediaType = new("UnsupportedMediaType");
        public static StatusCode RequestedRangeNotSatisfiable = new("RequestedRangeNotSatisfiable");
        public static StatusCode ExpectationFailed = new("ExpectationFailed");
        public static StatusCode UpgradeRequired = new("UpgradeRequired");
        public static StatusCode InternalServerError = new("InternalServerError");
        public static StatusCode NotImplemented = new("NotImplemented");
        public static StatusCode BadGateway = new("BadGateway");
        public static StatusCode ServiceUnavailable = new("ServiceUnavailable");
        public static StatusCode GatewayTimeout = new("GatewayTimeout");
        public static StatusCode HttpVersionNotSupported = new("HttpVersionNotSupported");
    }
}
