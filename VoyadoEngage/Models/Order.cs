// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace VoyadoEngage.Models;

public record Order(
    [property: JsonPropertyName("contact")] OrderContact Contact,
    [property: JsonPropertyName("orderNumber")] string OrderNumber,
    [property: JsonPropertyName("orderStatus")] string OrderStatus,
    [property: JsonPropertyName("paymentStatus")] string PaymentStatus,
    [property: JsonPropertyName("createdDate")] string CreatedDate,
    [property: JsonPropertyName("storeId")] string StoreId,
    [property: JsonPropertyName("currency")] string Currency,
    [property: JsonPropertyName("totalGrossPrice")] double TotalGrossPrice,
    [property: JsonPropertyName("items")] List<OrderItem> Items,
    [property:
        JsonPropertyName("language"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Language = null,
    [property:
        JsonPropertyName("shippingDate"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? ShippingDate = null,
    [property:
        JsonPropertyName("statusChangedDate"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? StatusChangedDate = null,
    [property:
        JsonPropertyName("exchangeRateToGroupCurrency"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? ExchangeRateToGroupCurrency = null,
    [property:
        JsonPropertyName("extraData"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        object? ExtraData = null,
    [property:
        JsonPropertyName("totalTax"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? TotalTax = null,
    [property:
        JsonPropertyName("taxDetails"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<TaxDetail>? TaxDetails = null,
    [property:
        JsonPropertyName("paymentMethods"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<OrderPaymentMethod>? PaymentMethods = null,
    [property:
        JsonPropertyName("freightFee"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        OrderFee? FreightFee = null,
    [property:
        JsonPropertyName("handlingFee"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        OrderFee? HandlingFee = null,
    [property:
        JsonPropertyName("totalRoundOff"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        OrderFee? TotalRoundOff = null,
    [property:
        JsonPropertyName("totalDiscounts"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? TotalDiscounts = null,
    [property:
        JsonPropertyName("totalOriginalPrice"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? TotalOriginalPrice = null,
    [property:
        JsonPropertyName("totalItemsPrice"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? TotalItemsPrice = null,
    [property:
        JsonPropertyName("totalNetPrice"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? TotalNetPrice = null,
    [property:
        JsonPropertyName("anyReturnItems"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? AnyReturnItems = null
);
