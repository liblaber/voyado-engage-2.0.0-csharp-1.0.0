// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using VoyadoEngage.Http;
using VoyadoEngage.Http.Serialization;
using VoyadoEngage.Models;

namespace VoyadoEngage.Services;

public class OrdersService : BaseService
{
    internal OrdersService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>
    /// The /orders endpoint is used to trigger automation flows in Engage and send out information about the order to your end customers.
    /// It could be used, for example, for an order confirmation, delivery confirmation or a return confirmation from an e-commerce
    /// system or store. The endpoint is called every time a change happens that you want to act on in Engage. All the data needed must
    /// be sent with every call, since this endpoint saves no data concerning orders. If you need to save data, use the /receipts endpoint instead.
    ///
    /// Note that there is no check against previous requests of the same order,
    /// thus two identical requests to this endpoint will trigger any matching automation twice.
    ///
    /// To accept an order:
    /// - The different orderStatus and paymentStatus values must be configured in Voyado.
    /// - totalGrossPrice, totalTax, item quantities etc. must be correct and add up.
    ///
    /// If the order is not accepted, a response with HTTP Status Code 400 or 422 and an error code will be returned.
    /// </summary>
    public async Task<StatusCodeResult> OrdersRegisterOrderAsync(
        Order input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "api/v2/orders")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<StatusCodeResult>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
