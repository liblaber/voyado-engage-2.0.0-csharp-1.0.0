// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using VoyadoEngage.Http;
using VoyadoEngage.Http.Serialization;
using VoyadoEngage.Models;

namespace VoyadoEngage.Services;

public class BonuschecksService : BaseService
{
    internal BonuschecksService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>
    /// Get all bonus checks for a contact. Expired, redeemed and available.
    /// The result can be paginated, using the offset and
    /// count query parameters.
    /// </summary>
    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="offset">The first item to retrieve. (Default value 0)</param>
    /// <param name="count">The max number of items to retrieve. (Default value 100)</param>
    public async Task<PagedResultOfAllBonusCheckModel> BonusChecksGetBonusChecksForContactAsync(
        string contactId,
        long? offset = null,
        long? count = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/contacts/{contactId}/bonuschecks")
            .SetPathParameter("contactId", contactId)
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("count", count)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PagedResultOfAllBonusCheckModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Get redeemed bonus checks for a contact.
    /// The result can be paginated, using the offset and
    /// count query parameters.
    /// </summary>
    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="offset">The first item to retrieve. (Default value 0)</param>
    /// <param name="count">The max number of items to retrieve. (Default value 100)</param>
    public async Task<PagedResultOfRedeemedBonusCheckModel> BonusChecksGetRedeemedBonusChecksForContactAsync(
        string contactId,
        long? offset = null,
        long? count = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactId}/bonuschecks/redeemed"
        )
            .SetPathParameter("contactId", contactId)
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("count", count)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PagedResultOfRedeemedBonusCheckModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Get available bonus checks for a contact.
    ///
    /// Expired and redeemed bonus checks are excluded
    ///
    /// The result can be paginated, using the *offset*
    /// and *count* query parameters.
    /// </summary>
    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="offset">Number of items to skip. (Default value 0)</param>
    /// <param name="count">Max number of items to take. (Default value 100)</param>
    public async Task<PagedResultOfAvailableBonusCheckModel> BonusChecksGetAvailableBonusChecksAsync(
        string contactId,
        long? offset = null,
        long? count = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactId}/bonuschecks/available"
        )
            .SetPathParameter("contactId", contactId)
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("count", count)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PagedResultOfAvailableBonusCheckModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Redeem a bonus check for a certain contact.</summary>
    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="bonusCheckId">Bonus check identifier.</param>
    public async Task<RedeemedBonusCheckModel> BonusChecksRedeemBonusCheckAsync(
        string contactId,
        string bonusCheckId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));
        ArgumentNullException.ThrowIfNull(bonusCheckId, nameof(bonusCheckId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/bonuschecks/{bonusCheckId}/redeem"
        )
            .SetPathParameter("contactId", contactId)
            .SetPathParameter("bonusCheckId", bonusCheckId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<RedeemedBonusCheckModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
