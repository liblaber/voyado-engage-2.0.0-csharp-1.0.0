// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using VoyadoEngage.Http;
using VoyadoEngage.Http.Exceptions;
using VoyadoEngage.Http.Extensions;
using VoyadoEngage.Http.Serialization;
using VoyadoEngage.Models;

namespace VoyadoEngage.Services;

public class InteractionsService : BaseService
{
    internal InteractionsService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>Retrieve a specific Interaction by providing the interactionId.</summary>
    public async Task<InteractionModel> InteractionGetInteractionAsync(
        string interactionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(interactionId, nameof(interactionId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/interactions/{interactionId}")
            .SetPathParameter("interactionId", interactionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<InteractionModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Delete a specific Interaction by providing the interactionId.</summary>
    public async Task InteractionDeleteInteractionAsync(
        string interactionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(interactionId, nameof(interactionId));

        var request = new RequestBuilder(HttpMethod.Delete, "api/v2/interactions/{interactionId}")
            .SetPathParameter("interactionId", interactionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        response.EnsureSuccessfulResponse();
    }

    /// <summary>
    /// Retrieve multiple Interactions of a specified type connected to a specific contactId. Both schemaId and contactId are required.
    /// The continuation parameter can be used to access the next page when there are more than 50 records available. This token can be found in the response.
    /// </summary>
    public async Task<InteractionPage> InteractionGetInteractionsAsync(
        string contactId,
        string schemaId,
        string? continuation = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));
        ArgumentNullException.ThrowIfNull(schemaId, nameof(schemaId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/interactions")
            .SetQueryParameter("contactId", contactId)
            .SetQueryParameter("schemaId", schemaId)
            .SetOptionalQueryParameter("continuation", continuation)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<InteractionPage>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Create a new Interaction connected to a specific contactId.</summary>
    public async Task<InteractionCreateResponse> InteractionCreateInteractionAsync(
        object input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "api/v2/interactions")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<InteractionCreateResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
