// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using VoyadoEngage.Http;
using VoyadoEngage.Http.Exceptions;
using VoyadoEngage.Http.Extensions;
using VoyadoEngage.Http.Serialization;
using VoyadoEngage.Models;

namespace VoyadoEngage.Services;

public class ContactsService : BaseService
{
    internal ContactsService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>
    /// Get number of approved contacts.
    ///
    /// This is a cached value that will be updated with a
    /// set frequency (normally once every 20 min).
    /// </summary>
    public async Task<long> ContactsVCountAsync(CancellationToken cancellationToken = default)
    {
        var request = new RequestBuilder(HttpMethod.Get, "api/v2/contacts/count").Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
            .EnsureSuccessfulResponse()
            .Content.ReadFromJsonAsync<long>(_jsonSerializerOptions, cancellationToken)
            .ConfigureAwait(false);
    }

    /// <summary>
    /// Get a single contact, using the unique identifier.
    ///
    /// The dynamic fields of the response object depend on
    /// the current instance configuration.
    /// </summary>
    /// <param name="contactId">Contact identifier (GUID).</param>
    public async Task<IApiContact> ContactsVGetContactByIdAsync(
        string contactId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/contacts/{contactId}")
            .SetPathParameter("contactId", contactId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<IApiContact>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Update one or several fields of a single contact.
    /// Dont send an empty value unless you want it to be empty.
    /// </summary>
    /// <param name="input">Updates to apply.</param>
    /// <param name="contactId">Contact identifier (GUID).</param>
    public async Task<IApiContact> ContactsVUpdateContactPostAsync(
        object input,
        string contactId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(HttpMethod.Post, "api/v2/contacts/{contactId}")
            .SetPathParameter("contactId", contactId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<IApiContact>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="source">Source system identifier (instance configuration)</param>
    public async Task<object> ContactsVDeleteWithHeaderParamAsync(
        string contactId,
        string? source = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(HttpMethod.Delete, "api/v2/contacts/{contactId}")
            .SetPathParameter("contactId", contactId)
            .SetOptionalHeader("source", source)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Get number of approved contacts of given type.
    ///
    /// This is a cached value that will be updated with a
    /// set frequency (normally once every 20 min).
    /// </summary>
    /// <param name="contactType">Id for contact type, e.g. "member" or "contact"</param>
    public async Task<long> ContactsVCountByContactTypeAsync(
        string contactType,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactType, nameof(contactType));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/contacts/{contactType}/count")
            .SetPathParameter("contactType", contactType)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
            .EnsureSuccessfulResponse()
            .Content.ReadFromJsonAsync<long>(_jsonSerializerOptions, cancellationToken)
            .ConfigureAwait(false);
    }

    /// <param name="batchId">Id from bulk contact import</param>
    public async Task<object> ContactBulkGetBulkStatusAsync(
        string batchId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(batchId, nameof(batchId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/contacts/bulk/status")
            .SetQueryParameter("batchId", batchId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// ! Please be aware that this endpoint is currently usable with either the key value being provided through !
    /// ! the path or a query param. Hence there being two of the same endpoints. !
    /// ! We recommend that you use the query param version (the first) as it is the more versatile one of the two !
    ///
    /// Get a single contact of a certain type, using a key
    /// value that corresponds to the current instance configuration. This can
    /// only be used for contact types with exactly ONE key.
    ///
    /// The dynamic fields of the response object depend on
    /// the current configuration.
    /// </summary>
    /// <param name="contactType">Contact type, e.g. "member".</param>
    /// <param name="keyValue">Key value, e.g. ssn, phone number etc.</param>
    public async Task<IApiContact> ContactsVGetContactByTypeAndKeyValueInUrlAsyncAsync(
        string contactType,
        string keyValue,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactType, nameof(contactType));
        ArgumentNullException.ThrowIfNull(keyValue, nameof(keyValue));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactType}/bykey/{keyValue}"
        )
            .SetPathParameter("contactType", contactType)
            .SetPathParameter("keyValue", keyValue)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<IApiContact>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <param name="contactId">Contact identifier (GUID).</param>
    public async Task<ProductRecommendationsModel> ProductRecommendationGetProductRecommendationsAsync(
        string contactId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactId}/productrecommendations"
        )
            .SetPathParameter("contactId", contactId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<ProductRecommendationsModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Following summary shows the purchase history for a single contact, over all time, 12 months and 24 months.</summary>
    /// <param name="contactId">Contact identifier (GUID)</param>
    public async Task<PurchaseHistorySummary> ContactRetailKpiGetPurchaseHistoryAsync(
        string contactId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactId}/purchasehistorysummary"
        )
            .SetPathParameter("contactId", contactId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PurchaseHistorySummary>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Get back in stock subscriptions for a contact</summary>
    public async Task BackInStockSubscriptionGetByContactIdAsync(
        string contactId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactId}/backinstock/subscriptions"
        )
            .SetPathParameter("contactId", contactId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        response.EnsureSuccessfulResponse();
    }

    /// <summary>
    /// Get a single contact of a certain type, using the
    /// contact's external id.
    ///
    /// The dynamic fields of the response object depend on
    /// the current configuration.
    /// </summary>
    /// <param name="contactType">Contact type, e.g. Member or Contact.</param>
    /// <param name="externalId">External contact id.</param>
    public async Task<IApiContact> ContactsVGetContactByExternalIdAsyncAsync(
        string contactType,
        string externalId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactType, nameof(contactType));
        ArgumentNullException.ThrowIfNull(externalId, nameof(externalId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactType}/byexternalid/{externalId}"
        )
            .SetPathParameter("contactType", contactType)
            .SetPathParameter("externalId", externalId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<IApiContact>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Get a single contact of a certain type, using a key
    /// value that corresponds to the current instance configuration. This can
    /// only be used for contact types with exactly ONE key.
    ///
    /// The dynamic fields of the response object depend on
    /// the current configuration.
    /// </summary>
    /// <param name="contactType">Contact type, e.g. "member".</param>
    /// <param name="keyValue">Key value, e.g. ssn, phone number etc.</param>
    public async Task<IApiContact> ContactsVGetContactByTypeAndKeyValueAsyncAsync(
        string contactType,
        string keyValue,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactType, nameof(contactType));
        ArgumentNullException.ThrowIfNull(keyValue, nameof(keyValue));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/contacts/{contactType}/bykey")
            .SetPathParameter("contactType", contactType)
            .SetQueryParameter("keyValue", keyValue)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<IApiContact>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Get the latest messages (max 500) a contact has received</summary>
    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="count">Max number of items to take. (Default value 100, Max value 500)</param>
    public async Task<ListResultOfApiMessage> ContactMessageGetLatestMessagesByContactIdAsync(
        string contactId,
        long? count = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactId}/messages/latest"
        )
            .SetPathParameter("contactId", contactId)
            .SetOptionalQueryParameter("count", count)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<ListResultOfApiMessage>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Optional offset and number of messages in response.</summary>
    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="offset">Default value 0</param>
    /// <param name="count">Max number of items to take. (Default value 100, max 500)</param>
    public async Task<PagedResultOfApiMessage> ContactMessageGetMessagesByContactIdAsync(
        string contactId,
        long? offset = null,
        long? count = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/contacts/{contactId}/messages")
            .SetPathParameter("contactId", contactId)
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("count", count)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PagedResultOfApiMessage>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Get all purchase transactions for a single contact with
    /// optional offset and number of transactions in response.
    /// </summary>
    /// <param name="contactId">Contact identifier (GUID)</param>
    /// <param name="offset">Number of items to skip. (Default value 0)</param>
    /// <param name="count">Max number of items to take. (Default value 100)</param>
    public async Task<PagedResultOfTransactionItem> TransactionsGetTransactionsByContactIdAsync(
        string contactId,
        long? offset = null,
        long? count = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/contacts/{contactId}/transactions")
            .SetPathParameter("contactId", contactId)
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("count", count)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PagedResultOfTransactionItem>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <param name="contactId">The contact identifier (GUID).</param>
    /// <param name="offset">The first item to retrieve. (Default value 0)</param>
    /// <param name="count">The max number of items to retrieve. (Default value 100)</param>
    public async Task<PagedResultOfBonusPointTransactionModel> BonusPointTransactionsGetBonusPointTransactionsForContactAsync(
        string contactId,
        long? offset = null,
        long? count = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactId}/bonuspointtransactions"
        )
            .SetPathParameter("contactId", contactId)
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("count", count)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PagedResultOfBonusPointTransactionModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <param name="changeType">Created, Updated or Deleted</param>
    /// <param name="fromDate">Start of timespan (ex 2023-05-04 11:20:00.000)</param>
    /// <param name="toDate">End of timespan (Default the current time and date)</param>
    public async Task<object> ContactsVGetChangedContactIdsAsync(
        ChangeType changeType,
        string fromDate,
        string? toDate = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(changeType, nameof(changeType));
        ArgumentNullException.ThrowIfNull(fromDate, nameof(fromDate));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/contacts/changes")
            .SetQueryParameter("changeType", changeType.Value)
            .SetQueryParameter("fromDate", fromDate)
            .SetOptionalQueryParameter("toDate", toDate)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Get available promotions for a contact. To filter on redemptionChannelType add it as a query string
    /// ?redemptionChannelType=POS
    /// It can be POS, ECOM or OTHER
    /// </summary>
    /// <param name="contactId">Contact identifier</param>
    /// <param name="redemptionChannelType">Filter on redemptionChannelType it can be POS, ECOM or OTHER</param>
    public async Task<List<ApiPromotionModel>> OfferPromotionsGetPromotionsForContactAsync(
        string contactId,
        string? redemptionChannelType = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/contacts/{contactId}/promotions")
            .SetPathParameter("contactId", contactId)
            .SetOptionalQueryParameter("redemptionChannelType", redemptionChannelType)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<List<ApiPromotionModel>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Get the contactId for one (or several) contacts using either:
    /// - email
    /// - socialSecurityNumber
    /// - mobilePhone
    /// - customKey (the customKey must be configured by your supplier)
    /// - any - the any field can contain email, socialSecurityNumber, mobilePhone or the custom key (and are checked in that order)
    /// </summary>
    public async Task<string> ContactOverviewGetContactIdAsyncAsync(
        string? contactType = null,
        string? email = null,
        string? socialSecurityNumber = null,
        string? mobilePhone = null,
        string? customKey = null,
        string? any = null,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "api/v2/contacts/id")
            .SetOptionalQueryParameter("contactType", contactType)
            .SetOptionalQueryParameter("email", email)
            .SetOptionalQueryParameter("socialSecurityNumber", socialSecurityNumber)
            .SetOptionalQueryParameter("mobilePhone", mobilePhone)
            .SetOptionalQueryParameter("customKey", customKey)
            .SetOptionalQueryParameter("any", any)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<string>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Create a new, approved contact.
    ///
    /// If the contacts key identifier (example: Email) already exists : returns the GUID of the first entry found.
    /// </summary>
    /// <param name="input">Contact data.</param>
    /// <param name="source">Source system identifier (instance configuration)</param>
    /// <param name="storeExternalId">The unique id code of the current store (and therefore also the recruited-by store). Not mandatory but strongly recommended.</param>
    /// <param name="createAsUnapproved">Contact is not approved on creation. (Default value false)</param>
    public async Task<IApiContact> ContactsVCreateContactHeaderParamAsync(
        object input,
        string? source = null,
        string? storeExternalId = null,
        string? createAsUnapproved = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "api/v2/contacts")
            .SetOptionalHeader("source", source)
            .SetOptionalHeader("storeExternalId", storeExternalId)
            .SetOptionalHeader("createAsUnapproved", createAsUnapproved)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<IApiContact>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Promote a contact to a member with one or several required fields.</summary>
    /// <param name="input">Updates to apply.</param>
    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="source">Source system identifier (instance configuration)</param>
    public async Task<IApiContact> ContactsVPromoteToMemberAsync(
        object input,
        string contactId,
        string? source = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/promoteToMember"
        )
            .SetPathParameter("contactId", contactId)
            .SetOptionalHeader("source", source)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<IApiContact>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <param name="input">Value in JArray</param>
    /// <param name="contactType">Optional, if not set the default ContactType will be used</param>
    public async Task<string> ContactBulkCreateContactsInBulkAsync(
        object input,
        string? contactType = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "api/v2/contacts/bulk")
            .SetOptionalQueryParameter("contactType", contactType)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<string>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <param name="input">Value in JArray</param>
    /// <param name="contactType">Optional, if not set the default ContactType will be used</param>
    /// <param name="avoidTriggeringExport">Optional, default value is false</param>
    public async Task<string> ContactBulkUpdateContactsInBulkAsync(
        object input,
        string? contactType = null,
        bool? avoidTriggeringExport = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Patch, "api/v2/contacts/bulk")
            .SetOptionalQueryParameter("contactType", contactType)
            .SetOptionalQueryParameter("avoidTriggeringExport", avoidTriggeringExport)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<string>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Update the preference that indicates whether or not
    /// a contact accepts to be contacted via sms. This will also approve an unapproved contact.
    /// The primary way of updating a contact preference is through the update contacts endpoint.
    /// </summary>
    /// <param name="input">Preference value.</param>
    /// <param name="contactId">Contact identifier (GUID).</param>
    public async Task<IApiContact> ContactPreferencesAcceptsSmsAsync(
        BoolRequest input,
        string contactId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/preferences/acceptsSms"
        )
            .SetPathParameter("contactId", contactId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<IApiContact>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Adds reward points to a contact.</summary>
    /// <param name="input">Reward points and description to add.</param>
    /// <param name="contactId">Contact identifier (GUID).</param>
    public async Task<ApiAdjustRewardPointsResponse> BonusPointTransactionsAdjustRewardPointsAsync(
        ApiAdjustRewardPoints input,
        string contactId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/rewardpointtransaction"
        )
            .SetPathParameter("contactId", contactId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<ApiAdjustRewardPointsResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Update the preference that indicates whether or not
    /// a contact accepts to be contacted via email. This will also approve an unapproved contact.
    /// The primary way of updating a contact preference is through the update contacts endpoint.
    /// </summary>
    /// <param name="input">Preference value.</param>
    /// <param name="contactId">Contact identifier (GUID).</param>
    public async Task<IApiContact> ContactPreferencesAcceptsEmailAsync(
        BoolRequest input,
        string contactId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/preferences/acceptsEmail"
        )
            .SetPathParameter("contactId", contactId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<IApiContact>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Update the preference that indicates whether or not
    /// a contact accepts to be contacted via regular mail. This will also approve an unapproved contact.
    /// The primary way of updating a contact preference is through the update contacts endpoint.
    /// </summary>
    /// <param name="input">Preference value.</param>
    /// <param name="contactId">Contact identifier (GUID).</param>
    public async Task<IApiContact> ContactPreferencesAcceptsPostalAsync(
        BoolRequest input,
        string contactId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/preferences/acceptsPostal"
        )
            .SetPathParameter("contactId", contactId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<IApiContact>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Assign a promotion (multichannel offer only) to a Contact using the internal Contact Id
    /// and the id of the promotion
    /// </summary>
    /// <param name="contactId">Contact identifier</param>
    /// <param name="promotionId">The id of the promotion</param>
    public async Task<object> AssignPromotionAssignAsync(
        string contactId,
        string promotionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));
        ArgumentNullException.ThrowIfNull(promotionId, nameof(promotionId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/promotions/{promotionId}/assign"
        )
            .SetPathParameter("contactId", contactId)
            .SetPathParameter("promotionId", promotionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Redeem a promotion (multichannel offer or mobile swipe) for a Contact using the internal Contact Id
    ///
    /// Redemption channel can be POS, ECOM or OTHER.
    /// </summary>
    /// <param name="input">The channel where the promotion was used</param>
    /// <param name="contactId">Contact identifier</param>
    /// <param name="promotionId">The id of the promotion</param>
    public async Task<object> OfferPromotionsRedeemAsync(
        RedeemBodyModel input,
        string contactId,
        string promotionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));
        ArgumentNullException.ThrowIfNull(promotionId, nameof(promotionId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/promotions/{promotionId}/redeem"
        )
            .SetPathParameter("contactId", contactId)
            .SetPathParameter("promotionId", promotionId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Optional messageId input if user wants to unsubscribe on specific message instead of last sent Sms</summary>
    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="messageId">Message Id (string).</param>
    public async Task<object> ContactMessageSmsUnsubscribeContactAsync(
        string contactId,
        string? messageId = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/unsubscribeSms"
        )
            .SetPathParameter("contactId", contactId)
            .SetOptionalQueryParameter("messageId", messageId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Optional messageId input if user wants to unsubscribe on specific message instead of last sent email</summary>
    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="messageId">Message Id (string).</param>
    public async Task ContactMessageEmailUnsubscribeContactAsync(
        string contactId,
        string? messageId = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/unsubscribeEmail"
        )
            .SetPathParameter("contactId", contactId)
            .SetOptionalQueryParameter("messageId", messageId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        response.EnsureSuccessfulResponse();
    }

    /// <summary>Updates the contactType for a contact if all expected contact data is available</summary>
    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="contactTypeId">The ContactType id (string).</param>
    public async Task ContactsVUpdateContactTypeAsync(
        string contactId,
        string contactTypeId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));
        ArgumentNullException.ThrowIfNull(contactTypeId, nameof(contactTypeId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/updateContactType"
        )
            .SetPathParameter("contactId", contactId)
            .SetQueryParameter("contactTypeId", contactTypeId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        response.EnsureSuccessfulResponse();
    }
}
