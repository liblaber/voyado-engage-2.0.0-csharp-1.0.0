// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using VoyadoEngage.Http;
using VoyadoEngage.Http.Serialization;
using VoyadoEngage.Models;

namespace VoyadoEngage.Services;

public class PointAccountsService : BaseService
{
    internal PointAccountsService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>Get the point account by point account id</summary>
    /// <param name="id">Account id</param>
    public async Task<PointAccountModel> PointAccountPointAccountGetAsync(
        long id,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "api/v2/point-accounts/{id}")
            .SetPathParameter("id", id)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PointAccountModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// ## Gets a point account matched with the pointDefinitionId
    ///
    /// Gets the name, id and description for each pointDefinition
    /// </summary>
    /// <param name="id">Definition Id</param>
    public async Task<PointDefinitionModel> PointAccountPointDefinitionAsync(
        long id,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "api/v2/point-accounts/definitions/{id}")
            .SetPathParameter("id", id)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PointDefinitionModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <param name="id">Transaction id</param>
    public async Task<PointTransactionModel> PointAccountPointTransactionsAsync(
        long id,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "api/v2/point-accounts/transactions/{id}")
            .SetPathParameter("id", id)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PointTransactionModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>## Gets point definitions</summary>
    /// <param name="offset">Defaults to 0</param>
    /// <param name="count">Defaults to 100</param>
    public async Task<List<PointDefinitionModel>> PointAccountPointDefinitionsAsync(
        long? offset = null,
        long? count = null,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "api/v2/point-accounts/definitions")
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("count", count)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<List<PointDefinitionModel>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets a list of accounts by contact id</summary>
    /// <param name="contactId">Contact id</param>
    /// <param name="offset">Defaults to 0</param>
    /// <param name="count">Defaults to 100</param>
    public async Task<PointAccountModelsResult> PointAccountPointAccountGet2Async(
        string contactId,
        long? offset = null,
        long? count = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/point-accounts")
            .SetQueryParameter("contactId", contactId)
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("count", count)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PointAccountModelsResult>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// There are two ways to fetch the list of transactions:
    /// - Using just the accountId returns the transactions for that particular points account. If this is used, the parameters contactId and definitionId are not required. If they are given, they will just be ignored.
    /// - The other way is to specify both contactId and definitionId. Both must be given.
    ///
    /// The optional parameters offset and count can be used in both cases to paginate the results.
    /// The optional parameter filter can also be used to fetch active points, pending points or both.
    /// All parameters are added to the query string.
    /// </summary>
    /// <param name="contactId">Contact id - Required together with definitionId if not using account id</param>
    /// <param name="definitionId">Definition id - Required together with contactId if not using account id</param>
    /// <param name="accountId">Account id - Required if contactId and definitionId is not provided</param>
    /// <param name="offset">Defaults to 0</param>
    /// <param name="count">Defaults to 100</param>
    /// <param name="filter">All, Active or Pending. If not specified it will default to All.</param>
    public async Task<PointTransactionModelsResult> PointAccountPointTransactions2Async(
        string? contactId = null,
        long? definitionId = null,
        long? accountId = null,
        long? offset = null,
        long? count = null,
        PointAccountPointTransactions2Filter? filter = null,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "api/v2/point-accounts/transactions")
            .SetOptionalQueryParameter("contactId", contactId)
            .SetOptionalQueryParameter("definitionId", definitionId)
            .SetOptionalQueryParameter("accountId", accountId)
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("count", count)
            .SetOptionalQueryParameter("filter", filter?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PointTransactionModelsResult>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// ## Point transactions being sent to a contacts specified point account, the endpoint will able to take max 1000 transaction rows.
    ///
    /// ### The following fields should be provided and have certain rules:
    /// - contactId: Must be a Guid
    /// - amount: The amount of points, negative amounts are accepted.
    /// - definitionId: specifies to which point account each transaction should be sent to
    /// - timeStamp: If not provided then the default value is taken from the requestors system timezone.
    /// - source: Must be provided or else that specified transaction will not be accepted.
    /// - description: Must be provided or else that transaction will not be accepted.
    /// - validFrom: If not provided then the default value is taken from the requestors system timezone.
    /// - validTo: Specifies how long the points are valid
    ///
    /// ### Important info:
    /// If some rows are not correct it will still result in an accepted response code and be skipped. Please
    /// check the response for NotAccepted items
    ///
    /// ### Idempotency-Key:
    /// The idempotency key is a unique identifier included in the header of an HTTP request to ensure the idempotence of certain operations. An idempotent operation is one that produces the same result regardless of how many times it is executed with the same input.
    /// #### Purpose
    /// The primary purpose of the idempotency key is to enable safe retries of requests. In situations where a client needs to resend a request due to network issues or other transient failures, the idempotency key helps prevent unintended side effects by ensuring that repeated requests with the same key result in the same outcome.
    /// </summary>
    /// <param name="input">The JSON object which contains the point transactions.</param>
    /// <param name="idempotencyKey">Optional, lasts for 24 hours</param>
    public async Task<PointTransactionToAccountResultModel> PointAccountAddPointTransactionsAsync(
        List<PointTransactionToAccount> input,
        string? idempotencyKey = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "api/v2/point-accounts/transactions")
            .SetOptionalHeader("Idempotency-Key", idempotencyKey)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PointTransactionToAccountResultModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
