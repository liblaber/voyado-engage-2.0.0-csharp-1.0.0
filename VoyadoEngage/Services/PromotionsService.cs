// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using VoyadoEngage.Http;
using VoyadoEngage.Http.Exceptions;
using VoyadoEngage.Http.Extensions;
using VoyadoEngage.Http.Serialization;
using VoyadoEngage.Models;

namespace VoyadoEngage.Services;

public class PromotionsService : BaseService
{
    internal PromotionsService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>Gets the multichannel promotion with the identifier which is set by Voyado</summary>
    /// <param name="id">Promotion identifier from Voyado</param>
    public async Task<MultichannelPromotionModel> MultichannelPromotionsGetByIdAsync(
        string id,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(id, nameof(id));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/promotions/multichannels/{id}")
            .SetPathParameter("id", id)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<MultichannelPromotionModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates an existing multichannel promotion.
    /// Only multichannel promotion in status 'Draft' can be updated.
    /// </summary>
    /// <param name="input">Multichannel promotion to update</param>
    /// <param name="id">Voyado multichannel promotion identifier</param>
    public async Task<MultichannelPromotionModel> MultichannelPromotionsUpdateAsync(
        MultichannelPromotionModel input,
        string id,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(id, nameof(id));

        var request = new RequestBuilder(HttpMethod.Put, "api/v2/promotions/multichannels/{id}")
            .SetPathParameter("id", id)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<MultichannelPromotionModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Only unassigned multichannel promotions can be deleted</summary>
    /// <param name="id">Voyado identifier to a multichannel promotion</param>
    public async Task<StatusCodeResult> MultichannelPromotionsDeleteByIdAsync(
        string id,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(id, nameof(id));

        var request = new RequestBuilder(HttpMethod.Delete, "api/v2/promotions/multichannels/{id}")
            .SetPathParameter("id", id)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<StatusCodeResult>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets the multichannel promotion with the identifier which is an internal reference for Voyado</summary>
    /// <param name="id">Identifier inside of Voyado</param>
    public async Task<PromotionValidityModel> MultichannelPromotionsGetValidityByIdAsync(
        string id,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(id, nameof(id));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/promotions/multichannels/{id}/validity"
        )
            .SetPathParameter("id", id)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PromotionValidityModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates duration of an existing multichannel promotion.
    /// Only multichannel promotion in status 'Draft' can be updated.
    /// </summary>
    /// <param name="input">Validity of promotion to update</param>
    /// <param name="id">Voyado multichannel promotion identifier</param>
    public async Task<MultichannelPromotionModel> MultichannelPromotionsUpdateValidityAsync(
        PromotionValidityModel input,
        string id,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(id, nameof(id));

        var request = new RequestBuilder(
            HttpMethod.Put,
            "api/v2/promotions/multichannels/{id}/validity"
        )
            .SetPathParameter("id", id)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<MultichannelPromotionModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets the multichannel promotion with the identifier which is an external reference for Voyado</summary>
    /// <param name="externalId">External identifier outside of Voyado</param>
    public async Task<MultichannelPromotionModel> MultichannelPromotionsGetByExternalIdAsync(
        string externalId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(externalId, nameof(externalId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/promotions/multichannels")
            .SetQueryParameter("externalId", externalId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<MultichannelPromotionModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Only creates multichannel promotion in status 'Draft'.</summary>
    /// <param name="input">Multichannel promotion to save</param>
    public async Task<MultichannelPromotionModel> MultichannelPromotionsCreateAsync(
        MultichannelBasePromotionModel input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "api/v2/promotions/multichannels")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<MultichannelPromotionModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Only unassigned multichannel promotions can be deleted</summary>
    /// <param name="externalId">External identifier to a multichannel promotion</param>
    public async Task<StatusCodeResult> MultichannelPromotionsDeleteByExternalIdAsync(
        string externalId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(externalId, nameof(externalId));

        var request = new RequestBuilder(HttpMethod.Delete, "api/v2/promotions/multichannels")
            .SetQueryParameter("externalId", externalId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<StatusCodeResult>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets the multichannel promotion validity with the identifier which is an external reference for Voyado</summary>
    /// <param name="externalId">External identifier outside of Voyado</param>
    public async Task<PromotionValidityModel> MultichannelPromotionsGetByValidityExternalIdAsync(
        string externalId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(externalId, nameof(externalId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/promotions/multichannels/validity")
            .SetQueryParameter("externalId", externalId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PromotionValidityModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Redeem a promotion (multichannel offer or mobile swipe) for a Contact using the internal promotion Id
    ///
    /// Redemption channel can be POS, ECOM or OTHER.
    /// </summary>
    /// <param name="input">The channel where the promotion was used</param>
    /// <param name="promotionId">The id of the promotion</param>
    public async Task<object> OfferPromotionsRedeemByPromotionIdAsync(
        RedeemBodyModel input,
        string promotionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(promotionId, nameof(promotionId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/promotions/codes/{promotionId}/redeem"
        )
            .SetPathParameter("promotionId", promotionId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Reactivate a redeemed reward voucher</summary>
    /// <param name="id">The id of the reward voucher</param>
    public async Task<string> OfferPromotionsReactivatePromotionCodeAsync(
        string id,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(id, nameof(id));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/promotions/reward-vouchers/{id}/reactivate"
        )
            .SetPathParameter("id", id)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<string>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
