// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using VoyadoEngage.Http;
using VoyadoEngage.Http.Exceptions;
using VoyadoEngage.Http.Extensions;
using VoyadoEngage.Http.Serialization;
using VoyadoEngage.Models;

namespace VoyadoEngage.Services;

public class StoresService : BaseService
{
    internal StoresService(HttpClient httpClient)
        : base(httpClient) { }

    /// <param name="includeInactive">Value indicating if the inactive stores should be included or not. (Default value = false)</param>
    public async Task<List<ApiStore>> StoresVGetStoresAsync(
        bool? includeInactive = null,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "api/v2/stores")
            .SetOptionalQueryParameter("includeInactive", includeInactive)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<List<ApiStore>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <param name="input">The store object to create.</param>
    public async Task<ApiStore> StoresVCreateStoreAsync(
        ApiStore input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "api/v2/stores")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<ApiStore>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <param name="externalId">The external id of the store to get.</param>
    /// <param name="includeInactive">Value indicating if the store can be inactive or not. (Default value = false)</param>
    public async Task<ApiStore> StoresVGetStoreAsync(
        string externalId,
        bool? includeInactive = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(externalId, nameof(externalId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/stores/{externalId}")
            .SetPathParameter("externalId", externalId)
            .SetOptionalQueryParameter("includeInactive", includeInactive)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<ApiStore>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Updates a store. externalId is the store identifier.</summary>
    /// <param name="input">The store object to update.</param>
    /// <param name="externalId">The external id of the store to update.</param>
    public async Task<ApiStore> StoresVUpdateStoreAsync(
        ApiStore input,
        string externalId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(externalId, nameof(externalId));

        var request = new RequestBuilder(HttpMethod.Post, "api/v2/stores/{externalId}")
            .SetPathParameter("externalId", externalId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<ApiStore>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
