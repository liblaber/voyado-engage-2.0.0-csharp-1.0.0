// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using VoyadoEngage.Http;
using VoyadoEngage.Http.Exceptions;
using VoyadoEngage.Http.Extensions;
using VoyadoEngage.Http.Serialization;
using VoyadoEngage.Models;

namespace VoyadoEngage.Services;

public class PosoffersService : BaseService
{
    internal PosoffersService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>
    /// Get all POS offers for a contact. Expired, redeemed and available.
    ///
    /// Finds the contact by using a key value other than Contact Id. This can
    /// only be used for contact types with exactly ONE key.
    /// The contact key attribute is configured for each Voyado instance.
    /// </summary>
    /// <param name="keyValue">Key value, e.g. ssn, externalId, memberNumber, phone number etc.</param>
    public async Task<PagedResultOfAllLoyaltyBarClaimModel> PosOfferGetAllPosOffersByKeyAsync(
        string keyValue,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(keyValue, nameof(keyValue));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/bykey/{keyValue}/posoffers/all"
        )
            .SetPathParameter("keyValue", keyValue)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PagedResultOfAllLoyaltyBarClaimModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Get all available POS offers for a contact.
    /// Expired and redeemed offers are excluded.
    ///
    /// Finds the contact by using a key value other than Contact Id. This can
    /// only be used for contact types with exactly ONE key.
    /// The contact key attribute is configured for each Voyado instance.
    /// </summary>
    /// <param name="keyValue">Key value, e.g. ssn, externalId, memberNumber, phone number etc.</param>
    public async Task<PagedResultOfAvailableLoyaltyBarClaimModel> PosOfferGetAvailablePosOffersByKeyAsync(
        string keyValue,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(keyValue, nameof(keyValue));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/bykey/{keyValue}/posoffers/available"
        )
            .SetPathParameter("keyValue", keyValue)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PagedResultOfAvailableLoyaltyBarClaimModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Get all POS offers for a contact. Expired, redeemed and available.
    ///
    /// Finds the contact by using a key value other than Contact Id. This can
    /// only be used for contact types with exactly ONE key.
    /// The contact key attribute is configured for each Voyado instance.
    /// </summary>
    /// <param name="keyValue">Key value, e.g. ssn, externalId, memberNumber, phone number etc.</param>
    /// <param name="contactType">Contact type, e.g. "member".</param>
    public async Task<PagedResultOfAllLoyaltyBarClaimModel> PosOfferGetAllPosOffersByContactTypeAndKeyAsync(
        string keyValue,
        string contactType,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(keyValue, nameof(keyValue));
        ArgumentNullException.ThrowIfNull(contactType, nameof(contactType));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactType}/bykey/{keyValue}/posoffers/all"
        )
            .SetPathParameter("keyValue", keyValue)
            .SetPathParameter("contactType", contactType)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PagedResultOfAllLoyaltyBarClaimModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Get all available POS offers for a contact.
    /// Expired and redeemed offers are excluded.
    ///
    /// Finds the contact by using a key value other than Contact Id. This can
    /// only be used for contact types with exactly ONE key.
    /// The contact key attribute is configured for each Voyado instance.
    /// </summary>
    /// <param name="keyValue">Key value, e.g. ssn, externalId, memberNumber, phone number etc.</param>
    /// <param name="contactType">Contact type, e.g. "member".</param>
    public async Task<PagedResultOfAvailableLoyaltyBarClaimModel> PosOfferGetAvailablePosOffersByContactTypeAndKeyAsync(
        string keyValue,
        string contactType,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(keyValue, nameof(keyValue));
        ArgumentNullException.ThrowIfNull(contactType, nameof(contactType));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactType}/bykey/{keyValue}/posoffers/available"
        )
            .SetPathParameter("keyValue", keyValue)
            .SetPathParameter("contactType", contactType)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PagedResultOfAvailableLoyaltyBarClaimModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Get all POS offers for a contact. Expired, redeemed and available.
    /// The result can be paginated, using the offset and
    /// count query parameters.
    /// Note: *expiresOn* is obsolete and is always **null**
    /// </summary>
    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="offset">The first item to retrieve. (Default value 0)</param>
    /// <param name="count">The max number of items to retrieve. (Default value 100)</param>
    public async Task<PagedResultOfAllLoyaltyBarClaimModel> PosOfferGetAllPosOffersForContactAsync(
        string contactId,
        long? offset = null,
        long? count = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactId}/posoffers/all"
        )
            .SetPathParameter("contactId", contactId)
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("count", count)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PagedResultOfAllLoyaltyBarClaimModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Get all available POS offers for a contact.
    /// Expired and redeemed offers are excluded.
    ///
    /// The result can be paginated, using the offset and
    /// count query parameters.
    /// </summary>
    /// <param name="contactId">Contact identifier (GUID).</param>
    /// <param name="offset">The first item to retrieve. (Default value 0)</param>
    /// <param name="count">The max number of items to retrieve. (Default value 100)</param>
    public async Task<PagedResultOfAvailableLoyaltyBarClaimModel> PosOfferGetAvailablePosOffersForContactAsync(
        string contactId,
        long? offset = null,
        long? count = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/contacts/{contactId}/posoffers/available"
        )
            .SetPathParameter("contactId", contactId)
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("count", count)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PagedResultOfAvailableLoyaltyBarClaimModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Redeems a POS offer for a Contact using the internal Contact Id</summary>
    /// <param name="id">The id returned from the get operation (GUID)</param>
    /// <param name="contactId">Contact identifier (GUID).</param>
    public async Task<RedeemedLoyaltyBarClaimModel> PosOfferRedeemAsync(
        string id,
        string contactId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(id, nameof(id));
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/posoffers/{id}/redeem"
        )
            .SetPathParameter("id", id)
            .SetPathParameter("contactId", contactId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<RedeemedLoyaltyBarClaimModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Redeems a POS offer for a Contact using the key for the contact type
    ///
    /// Finds the contact by using a key value other than Contact Id. This can
    /// only be used for contact types with exactly ONE key.
    /// The contact key attribute is configured for each Voyado instance.
    /// </summary>
    /// <param name="id">The id returned from the get operation (GUID)</param>
    /// <param name="keyValue">Key value, e.g. ssn, externalId, memberNumber, phone number etc.</param>
    public async Task<RedeemedLoyaltyBarClaimModel> PosOfferRedeemByKeyAsync(
        string id,
        string keyValue,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(id, nameof(id));
        ArgumentNullException.ThrowIfNull(keyValue, nameof(keyValue));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/bykey/{keyValue}/posoffers/{id}/redeem"
        )
            .SetPathParameter("id", id)
            .SetPathParameter("keyValue", keyValue)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<RedeemedLoyaltyBarClaimModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Redeems a POS offer for a Contact using the key for the contact type
    ///
    /// Finds the contact by using a key value other than Contact Id. This can
    /// only be used for contact types with exactly ONE key.
    /// The contact key attribute is configured for each Voyado instance.
    /// </summary>
    /// <param name="id">The id returned from the get operation (GUID)</param>
    /// <param name="keyValue">Key value, e.g. ssn, externalId, memberNumber, phone number etc.</param>
    /// <param name="contactType">Contact type, e.g. "member" or "contact".</param>
    public async Task<RedeemedLoyaltyBarClaimModel> PosOfferRedeemByContactTypeAndKeyAsync(
        string id,
        string keyValue,
        string contactType,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(id, nameof(id));
        ArgumentNullException.ThrowIfNull(keyValue, nameof(keyValue));
        ArgumentNullException.ThrowIfNull(contactType, nameof(contactType));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactType}/bykey/{keyValue}/posoffers/{id}/redeem"
        )
            .SetPathParameter("id", id)
            .SetPathParameter("keyValue", keyValue)
            .SetPathParameter("contactType", contactType)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<RedeemedLoyaltyBarClaimModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
