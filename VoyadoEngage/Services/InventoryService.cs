// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using VoyadoEngage.Http;
using VoyadoEngage.Http.Exceptions;
using VoyadoEngage.Http.Extensions;
using VoyadoEngage.Http.Serialization;
using VoyadoEngage.Models;

namespace VoyadoEngage.Services;

public class InventoryService : BaseService
{
    internal InventoryService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>
    /// Update stock level for a specific SKU.
    ///
    /// Request model:
    /// - Sku*: Unique SKU of the product. E.g: "123XYZ"
    /// - Quantity*: The latest stock quantity of the product. E.g: 10
    /// - Locale: Culture code. A corresponding product feed should be configured. E.g: "sv-se"
    /// - ExternalId: External identifier. E.g: "SE-123XYZ"
    ///
    /// \* required
    /// </summary>
    public async Task<object> InventoryUpdateStockLevelAsync(
        StockLevelRequest input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Put, "api/v2/inventory/stock-levels")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Batch update of stock levels for multiple SKU's.
    ///
    /// Request model:
    /// - Sku*: Unique SKU of the product. E.g: "123XYZ"
    /// - Quantity*: The latest stock quantity of the product. E.g: 10
    /// - Locale: Culture code. A corresponding product feed should be configured. E.g: "sv-se"
    /// - ExternalId: External identifier. E.g: "SE-123XYZ"
    ///
    /// \* required
    /// </summary>
    public async Task<object> InventoryUpdateStockLevelsAsync(
        List<StockLevelRequest> input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Put, "api/v2/inventory/stock-levels/batch")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Create a back in stock subscription for a specific SKU.
    ///
    /// Request model:
    /// - ContactId*: Contact id of the subscriber. E.g: "FF9FD9AF-6778-4714-B0FE-F6E6612840C8"
    /// - Sku*: Unique SKU of the product. E.g: "123XYZ"
    /// - Locale*: Culture code. A corresponding product feed should be configured. E.g: "sv-se"
    /// - ExternalId: External identifier. E.g: "SE-123XYZ"
    ///
    /// \* required
    /// </summary>
    public async Task<object> BackInStockSubscriptionSubscribeAsync(
        SubscriptionRequest input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/inventory/backinstock/subscriptions"
        )
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Delete a specific back in stock subscription.</summary>
    public async Task<object> BackInStockSubscriptionUnsubscribeAsync(
        string subscriptionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(subscriptionId, nameof(subscriptionId));

        var request = new RequestBuilder(
            HttpMethod.Delete,
            "api/v2/inventory/backinstock/subscriptions/{subscriptionId}"
        )
            .SetPathParameter("subscriptionId", subscriptionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
