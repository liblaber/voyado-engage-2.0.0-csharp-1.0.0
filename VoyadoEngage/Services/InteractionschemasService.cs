// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using VoyadoEngage.Http;
using VoyadoEngage.Http.Exceptions;
using VoyadoEngage.Http.Extensions;
using VoyadoEngage.Http.Serialization;
using VoyadoEngage.Models;

namespace VoyadoEngage.Services;

public class InteractionschemasService : BaseService
{
    internal InteractionschemasService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>Retrieve all InteractionSchemas.</summary>
    public async Task<
        List<InteractionSchemaWithoutJsonModel>
    > InteractionSchemaGetInteractionSchemasAsync(CancellationToken cancellationToken = default)
    {
        var request = new RequestBuilder(HttpMethod.Get, "api/v2/interactionschemas").Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<List<InteractionSchemaWithoutJsonModel>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Create a new InteractionSchema.</summary>
    public async Task<InteractionSchemaResponse> InteractionSchemaCreateInteractionSchemaAsync(
        object input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "api/v2/interactionschemas")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<InteractionSchemaResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Retrieve a specific InteractionSchema by providing the schemaId.</summary>
    public async Task<InteractionSchemaModel> InteractionSchemaGetInteractionSchemaAsync(
        string interactionSchemaId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(interactionSchemaId, nameof(interactionSchemaId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "api/v2/interactionschemas/{interactionSchemaId}"
        )
            .SetPathParameter("interactionSchemaId", interactionSchemaId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<InteractionSchemaModel>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Delete InteractionSchema by providing the schemaId.</summary>
    public async Task InteractionSchemaDeleteInteractionSchemaAsync(
        string interactionSchemaId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(interactionSchemaId, nameof(interactionSchemaId));

        var request = new RequestBuilder(
            HttpMethod.Delete,
            "api/v2/interactionschemas/{interactionSchemaId}"
        )
            .SetPathParameter("interactionSchemaId", interactionSchemaId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        response.EnsureSuccessfulResponse();
    }
}
