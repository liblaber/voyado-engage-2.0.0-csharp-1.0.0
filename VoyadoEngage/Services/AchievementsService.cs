// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using VoyadoEngage.Http;
using VoyadoEngage.Http.Serialization;
using VoyadoEngage.Models;

namespace VoyadoEngage.Services;

public class AchievementsService : BaseService
{
    internal AchievementsService(HttpClient httpClient)
        : base(httpClient) { }

    public async Task<List<ApiAchievementValue>> AchievementsGetAchievementsForContactAsync(
        string contactId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));

        var request = new RequestBuilder(HttpMethod.Get, "api/v2/contacts/{contactId}/achievements")
            .SetPathParameter("contactId", contactId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<List<ApiAchievementValue>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    public async Task<PagedResultOfApiAchievementDefinition> AchievementsGetAllAchievementsAsync(
        long? offset = null,
        long? count = null,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "api/v2/achievements")
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("count", count)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PagedResultOfApiAchievementDefinition>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    public async Task AchievementsSetAchievementAsync(
        object input,
        string contactId,
        string achievementId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));
        ArgumentNullException.ThrowIfNull(achievementId, nameof(achievementId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "api/v2/contacts/{contactId}/achievements/{achievementId}"
        )
            .SetPathParameter("contactId", contactId)
            .SetPathParameter("achievementId", achievementId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();
    }

    public async Task AchievementsRemoveAchievementAsync(
        string contactId,
        string achievementId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(contactId, nameof(contactId));
        ArgumentNullException.ThrowIfNull(achievementId, nameof(achievementId));

        var request = new RequestBuilder(
            HttpMethod.Delete,
            "api/v2/contacts/{contactId}/achievements/{achievementId}"
        )
            .SetPathParameter("contactId", contactId)
            .SetPathParameter("achievementId", achievementId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();
    }
}
